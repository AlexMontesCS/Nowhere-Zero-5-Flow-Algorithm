#!/bin/bash

mkdir -p graphs

for n in $(seq 4 2 20); do
    e=$((3 * n / 2))
    echo "▶ Generating connected graphs with n=$n, e=$e..."

    # Step 1: Generate all connected graphs with exactly e edges
    geng -c $n ${e}:${e} > graphs/tmp${n}.g6
    echo "   → $(wc -l < graphs/tmp${n}.g6) graphs generated by geng"

    echo " - Filtering to cubic (3-regular) and bridgeless graphs..."

    python3 - <<EOF
import networkx as nx

with open("graphs/tmp${n}.g6") as f:
    graphs = [nx.from_graph6_bytes(line.strip().encode()) for line in f]

def is_valid(G):
    return (
        all(d == 3 for _, d in G.degree()) and
        nx.edge_connectivity(G) >= 2
    )

filtered = [G for G in graphs if is_valid(G)]

with open(f"graphs/cubic${n}_bridgeless.g6", "w") as f:
    for G in filtered:
        f.write(nx.to_graph6_bytes(G).decode())

print(f"   → n = ${n}: {len(filtered)} bridgeless cubic graphs saved.")
EOF

    rm graphs/tmp${n}.g6
    echo "-------------------------------------------"
done

